// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_94a5ba242d36ffd449a774ea4e84f0b5_bbfa81ab_20f2_4802_998d_3a444677b9a0 : PositionBinding
	{
		public override string CoherenceComponentName => "WorldPosition";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Vector3 Value
		{
			get => (Vector3)(UnityEngine.Vector3)(coherenceSync.coherencePosition);
			set => coherenceSync.coherencePosition = (UnityEngine.Vector3)(value);
		}

		protected override Vector3 ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((WorldPosition)coherenceComponent).value;
			if (!coherenceSync.HasParentWithCoherenceSync)
            {
                value += floatingOriginDelta;
            }
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, double time)
		{
			var update = (WorldPosition)coherenceComponent;
			if (RuntimeInterpolationSettings.IsInterpolationNone) 
			{
				update.value = Value;
			}
			else 
			{
				update.value = GetInterpolatedAt(time);
			}
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new WorldPosition();
		}
	}

	public class Binding_94a5ba242d36ffd449a774ea4e84f0b5_f3da6e61_c19f_483e_9ef4_00d29299efda : StringBinding
	{
		private global::Player CastedUnityComponent;

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (global::Player)UnityComponent;
		}
		public override string CoherenceComponentName => "PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Player_694873017490517114";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override string Value
		{
			get => (string)(System.String)(CastedUnityComponent.playerName);
			set => CastedUnityComponent.playerName = (System.String)(value);
		}

		protected override string ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Player_694873017490517114)coherenceComponent).playerName;
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, double time)
		{
			var update = (PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Player_694873017490517114)coherenceComponent;
			if (RuntimeInterpolationSettings.IsInterpolationNone) 
			{
				update.playerName = Value;
			}
			else 
			{
				update.playerName = GetInterpolatedAt(time);
			}
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Player_694873017490517114();
		}
	}

	public class Binding_94a5ba242d36ffd449a774ea4e84f0b5_95cc7032_16a9_4b2a_a7dd_e24f61f4959b : LongBinding
	{
		private global::Player CastedUnityComponent;

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (global::Player)UnityComponent;
		}
		public override string CoherenceComponentName => "PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Player_694873017490517114";

		public override uint FieldMask => 0b00000000000000000000000000000010;

		public override long Value
		{
			get => (long)(System.Int64)(CastedUnityComponent.startOnFrame);
			set => CastedUnityComponent.startOnFrame = (System.Int64)(value);
		}

		protected override long ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Player_694873017490517114)coherenceComponent).startOnFrame;
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, double time)
		{
			var update = (PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Player_694873017490517114)coherenceComponent;
			if (RuntimeInterpolationSettings.IsInterpolationNone) 
			{
				update.startOnFrame = Value;
			}
			else 
			{
				update.startOnFrame = GetInterpolatedAt(time);
			}
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Player_694873017490517114();
		}
	}


	[Preserve]
	public class CoherenceSyncPlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5 : CoherenceSyncBaked
	{
		private SerializeEntityID entityId;
		private Logger logger = Log.GetLogger<CoherenceSyncPlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5>();

		// Cached targets for commands
		private InputBuffer<PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Input> inputBuffer;
		private PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Input currentInput;
		private long lastAddedFrame = -1;
		private CoherenceInput coherenceInput;
		private long currentSimulationFrame => coherenceInput.CurrentSimulationFrame;

		private IClient client;
		private CoherenceBridge bridge;

		private readonly Dictionary<string, Binding> bakedValueBindings = new Dictionary<string, Binding>()
		{
			["bbfa81ab-20f2-4802-998d-3a444677b9a0"] = new Binding_94a5ba242d36ffd449a774ea4e84f0b5_bbfa81ab_20f2_4802_998d_3a444677b9a0(),
			["f3da6e61-c19f-483e-9ef4-00d29299efda"] = new Binding_94a5ba242d36ffd449a774ea4e84f0b5_f3da6e61_c19f_483e_9ef4_00d29299efda(),
			["95cc7032-16a9-4b2a-a7dd-e24f61f4959b"] = new Binding_94a5ba242d36ffd449a774ea4e84f0b5_95cc7032_16a9_4b2a_a7dd_e24f61f4959b(),
		};

		private Dictionary<string, Action<CommandBinding, CommandsHandler>> bakedCommandBindings =
			new Dictionary<string, Action<CommandBinding, CommandsHandler>>();

		public CoherenceSyncPlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5()
		{
		}

		public override Binding BakeValueBinding(Binding valueBinding)
		{
			if (bakedValueBindings.TryGetValue(valueBinding.guid, out var bakedBinding))
			{
				valueBinding.CloneTo(bakedBinding);
				return bakedBinding;
			}

			return null;
		}

		public override void BakeCommandBinding(CommandBinding commandBinding, CommandsHandler commandsHandler)
		{
			if (bakedCommandBindings.TryGetValue(commandBinding.guid, out var commandBindingBaker))
			{
				commandBindingBaker.Invoke(commandBinding, commandsHandler);
			}
		}

		public override List<ICoherenceComponentData> CreateEntity(bool usesLodsAtRuntime, string archetypeName)
		{
			if (!usesLodsAtRuntime)
			{
				return null;
			}

			if (Archetypes.IndexForName.TryGetValue(archetypeName, out int archetypeIndex))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
	
			logger.Warning($"Unable to find archetype {archetypeName} in dictionary. Please, bake manually (coherence > Bake)");

			return null;
		}

		public override void Dispose()
		{
			if (bridge != null)
			{
				bridge.OnLateFixedNetworkUpdate -= SendInputState;
			}
		}

		public override void Initialize(SerializeEntityID entityId, CoherenceBridge bridge, IClient client, CoherenceInput input, Logger logger)
		{
			this.logger = logger.With<CoherenceSyncPlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5>();
			this.bridge = bridge;
			this.entityId = entityId;
			this.client = client;
			coherenceInput = input;
			inputBuffer = new InputBuffer<PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Input>(coherenceInput.InitialBufferSize, coherenceInput.InitialInputDelay, coherenceInput.UseFixedSimulationFrames);

			coherenceInput.internalSetButton = SetButton;
			coherenceInput.internalSetAxis = SetAxis;
			coherenceInput.internalSetAxis2D = SetAxis2D;
			coherenceInput.internalSetAxis3D = SetAxis3D;
			coherenceInput.internalSetRotation = SetRotation;
			coherenceInput.internalSetInteger = SetInteger;
			coherenceInput.internalSetString = SetString;
			coherenceInput.internalGetButton = GetButton;
			coherenceInput.internalGetAxis = GetAxis;
			coherenceInput.internalGetAxis2D = GetAxis2D;
			coherenceInput.internalGetAxis3D = GetAxis3D;
			coherenceInput.internalGetRotation = GetRotation;
			coherenceInput.internalGetInteger = GetInteger;
			coherenceInput.internalGetString = GetString;
			coherenceInput.internalRequestBuffer = () => inputBuffer;
			coherenceInput.internalOnInputReceived += OnInput;
			coherenceInput.internalRequestBuffer = () => inputBuffer;

			if (coherenceInput.UseFixedSimulationFrames)
			{
				bridge.OnLateFixedNetworkUpdate += SendInputState;
			}
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncPlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5] Unhandled command: {command.GetType()}.");
					break;
			}
		}

		private void SetButton(string name, bool value)
		{
			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}
		}

		private void SetAxis(string name, float value)
		{
			switch(name)
			{
			case "key":
				currentInput.key = value;
				break;
			default:
				logger.Error($"No input axis of name: {name}");
				break;
			}
		}

		private void SetAxis2D(string name, Vector2 value)
		{
			switch(name)
			{
			case "Mov":
				currentInput.Mov = value;
				break;
			default:
				logger.Error($"No input axis2D of name: {name}");
				break;
			}
		}

		private void SetAxis3D(string name, Vector3 value)
		{
			switch(name)
			{
			default:
				logger.Error($"No input axis3D of name: {name}");
				break;
			}
		}

		private void SetRotation(string name, Quaternion value)
		{
			switch(name)
			{
			default:
				logger.Error($"No input rotation of name: {name}");
				break;
			}
		}

		private void SetInteger(string name, int value)
		{
			switch(name)
			{
			default:
				logger.Error($"No input integer of name: {name}");
				break;
			}
		}

		private void SetString(string name, string value)
		{
			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}
		}

		public override void SendInputState()
		{
			if (!coherenceInput.IsProducer || !coherenceInput.IsReadyToProcessInputs || !coherenceInput.IsInputOwner)
			{
				return;
			}

			if (lastAddedFrame != currentSimulationFrame)
			{
				inputBuffer.AddInput(currentInput, currentSimulationFrame);
				lastAddedFrame = currentSimulationFrame;
			}

			while (inputBuffer.DequeueForSending(currentSimulationFrame, out long frameToSend, out PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Input input, out bool differs))
			{
				coherenceInput.DebugOnInputSent(frameToSend, input);
				client.SendInput(input, frameToSend, entityId);
			}
		}

		private bool ShouldPollCurrentInput(long frame)
		{
			return coherenceInput.IsProducer && coherenceInput.Delay == 0 && frame == currentSimulationFrame;
		}

		private bool GetButton(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}

			return false;
		}

		private float GetAxis(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
			case "key":
				{
					if (ShouldPollCurrentInput(frame))
					{
						return coherenceInput.IsProducer ? currentInput.key : currentInput.key;
					}

					inputBuffer.TryGetInput(frame, out PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Input input);
					return coherenceInput.IsProducer ? input.key : input.key;
				}
			default:
				logger.Error($"No input axis of name: {name}");
				break;
			}

			return 0f;
		}

		private Vector2 GetAxis2D(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
			case "Mov":
				{
					if (ShouldPollCurrentInput(frame))
					{
						return coherenceInput.IsProducer ? currentInput.Mov : currentInput.Mov;
					}

					inputBuffer.TryGetInput(frame, out PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Input input);
					return coherenceInput.IsProducer ? input.Mov : input.Mov;
				}
			default:
				logger.Error($"No input axis2D of name: {name}");
				break;
			}

			return Vector2.zero;
		}

		private Vector3 GetAxis3D(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
			default:
				logger.Error($"No input axis3D of name: {name}");
				break;
			}

			return Vector3.zero;
		}

		private Quaternion GetRotation(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
			default:
				logger.Error($"No input rotation of name: {name}");
				break;
			}

			return Quaternion.identity;
		}

		private int GetInteger(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
			default:
				logger.Error($"No input integer of name: {name}");
				break;
			}

			return default;
		}

		private string GetString(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}

			return null;
		}

		private void OnInput(IEntityInput entityInput, long frame)
		{
			var input = (PlayerCursor_94a5ba242d36ffd449a774ea4e84f0b5_Input)entityInput;
			coherenceInput.DebugOnInputReceived(frame, entityInput);
			inputBuffer.ReceiveInput(input, frame);
		}
	}
}

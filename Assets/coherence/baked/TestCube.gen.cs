// Copyright (c) coherence ApS.
// See the license file in the project root for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using UnityEngine;
	using Unity.Collections;
	using Unity.Mathematics;

	public struct TestCube : IEntityInput
	{
		public float2 Mov;
		public bool enter;
		public string key;
		public bool up;
		public bool down;
		public bool left;
		public bool right;

		public float2 CompressedMov => ValueCompressor.Compressfloat2(Mov, 24, 2400);
		public string Compressedkey => ValueCompressor.Compressstring(key);

		public uint GetComponentType() => Definition.InternalTestCube;

		private readonly bool isRemoteInput;

		public TestCube
		(
			float2 dataMov,
			bool dataenter,
			string datakey,
			bool dataup,
			bool datadown,
			bool dataleft,
			bool dataright,
			bool isRemoteInput
		)
		{
			Mov = dataMov;
			enter = dataenter;
			key = datakey;
			up = dataup;
			down = datadown;
			left = dataleft;
			right = dataright;
			this.isRemoteInput = isRemoteInput;
		}

		public override string ToString()
		{
			return isRemoteInput
				? $"{nameof(Mov)}: {Mov}, {nameof(enter)}: {enter}, {nameof(key)}: {key}, {nameof(up)}: {up}, {nameof(down)}: {down}, {nameof(left)}: {left}, {nameof(right)}: {right}"
				: $"{nameof(Mov)}:{CompressedMov}, {nameof(enter)}:{enter}, {nameof(key)}:{Compressedkey}, {nameof(up)}:{up}, {nameof(down)}:{down}, {nameof(left)}:{left}, {nameof(right)}:{right}";
		}

		public static void Serialize(TestCube inputData, IOutProtocolBitStream bitStream)
		{
			var converted_Mov = CoherenceToUnityConverters.FromUnityfloat2(inputData.Mov);
			bitStream.WriteVector2f(converted_Mov, 24, 2400);
			bitStream.WriteBool(inputData.enter);
			bitStream.WriteShortString(inputData.key);
			bitStream.WriteBool(inputData.up);
			bitStream.WriteBool(inputData.down);
			bitStream.WriteBool(inputData.left);
			bitStream.WriteBool(inputData.right);
		}

		public static TestCube Deserialize(IInProtocolBitStream bitStream)
		{
			var converted_Mov = bitStream.ReadVector2f(24, 2400);
			var dataMov = CoherenceToUnityConverters.ToUnityfloat2(converted_Mov);
			var dataenter = bitStream.ReadBool();
			var datakey = bitStream.ReadShortString();
			var dataup = bitStream.ReadBool();
			var datadown = bitStream.ReadBool();
			var dataleft = bitStream.ReadBool();
			var dataright = bitStream.ReadBool();

			return new TestCube
			(
				dataMov,
				dataenter,
				datakey,
				dataup,
				datadown,
				dataleft,
				dataright,
				true
			);
		}
	}
}

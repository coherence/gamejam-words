// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.Brook;
	using UnityEngine;

	public struct TestCube : IEntityInput
	{
		public uint GetComponentType() => Definition.InternalTestCube;

		public float key;
		public Vector2 Mov;
		private readonly bool isRemoteInput;

		public TestCube
		(
			float datakey,
			Vector2 dataMov,
			bool isRemoteInput
		)
		{
			key = datakey;
			Mov = dataMov;
			this.isRemoteInput = isRemoteInput;
		}

		public override string ToString()
		{
			return isRemoteInput
				? $"{nameof(key)}: {key}, {nameof(Mov)}: {Mov}"
				: $"{nameof(key)}: {key}, {nameof(Mov)}: {Mov}";
		}

		public static void Serialize(TestCube inputData, IOutProtocolBitStream bitStream)
		{
			bitStream.WriteFloat(inputData.key, FloatMeta.NoCompression());
			var converted_Mov = inputData.Mov.ToCoreVector2();
			bitStream.WriteVector2(converted_Mov, FloatMeta.NoCompression());
		}

		public static TestCube Deserialize(IInProtocolBitStream bitStream)
		{
			var datakey = bitStream.ReadFloat(FloatMeta.NoCompression());
			var converted_Mov = bitStream.ReadVector2(FloatMeta.NoCompression());
			var dataMov = converted_Mov.ToUnityVector2();

			return new TestCube
			(
				datakey,
				dataMov,
				true
			);
		}
	}
}

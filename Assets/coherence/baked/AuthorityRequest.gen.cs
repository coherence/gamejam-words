// Copyright (c) coherence ApS.
// See the license file in the project root for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.Brook;
	using UnityEngine;
	using Coherence.Entity;

	public struct AuthorityRequest : IEntityCommand
	{
		public int requester;
		public int authorityType;

		public MessageTarget Routing => MessageTarget.All;
		public uint GetComponentType() => Definition.InternalAuthorityRequest;

		public AuthorityRequest
		(
			int datarequester,
			int dataauthorityType
		)
		{
			requester = datarequester;
			authorityType = dataauthorityType;
		}

		public static void Serialize(AuthorityRequest commandData, IOutProtocolBitStream bitStream)
		{
			bitStream.WriteIntegerRange(commandData.requester, 32, -2147483648);
			bitStream.WriteIntegerRange(commandData.authorityType, 2, 0);
		}

		public static AuthorityRequest Deserialize(IInProtocolBitStream bitStream)
		{
			var datarequester = bitStream.ReadIntegerRange(32, -2147483648);
			var dataauthorityType = bitStream.ReadIntegerRange(2, 0);

			return new AuthorityRequest
			(
				datarequester,
				dataauthorityType
			){};
		}
	}
}

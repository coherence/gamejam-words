// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Connection;
	using Coherence.Log;
	using UnityEngine.Scripting;

	using Logger = Coherence.Log.Logger;

	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'PlayerCursor' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncPlayerCursor : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached references to MonoBehaviours on this GameObject
		private Coherence.Toolkit.CoherenceSync _transformViaCoherenceSync_5087559671055490318;
		private Player _Player_694873017490517114;

		// Last sent data for each component (used for diffing)
		private WorldPosition _transformViaCoherenceSync_5087559671055490318_WorldPosition_lastSentData = default;
		private WorldOrientation _transformViaCoherenceSync_5087559671055490318_WorldOrientation_lastSentData = default;
		private PlayerCursor_Player_694873017490517114 _Player_694873017490517114_PlayerCursor_Player_694873017490517114_lastSentData = default;

		// Cached targets for commands	

		private string lastSerializedCoherenceUUID;
		private bool performedInitialSync = false;
		private IBinding InternalWorldPosition_Translation_value_Binding;
		private IBinding InternalWorldOrientation_Rotation_value_Binding;
		private IBinding InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding;
		private IBinding InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding;

		private InputBuffer<TestCube> inputBuffer;
		private TestCube currentInput;
		private long lastAddedFrame = -1;

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;
		private long currentSimulationFrame => coherenceInput.CurrentSimulationFrame;
		private CoherenceInput coherenceInput;

		private List<ComponentChange> updateBuff = new List<ComponentChange>(16);
		private Dictionary<SerializeEntityID, EntityData> delayedEntityReferences;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;
			coherenceInput = coherenceSync.Input;

			logger = coherenceSync.logger.With<CoherenceSyncPlayerCursor>();

			inputBuffer = new InputBuffer<TestCube>(coherenceInput.InitialBufferSize, coherenceInput.InitialBufferDelay, coherenceInput.UseFixedSimulationFrames);

			if (coherenceSync.TryGetBindingByGuid("e1421fbd-1c05-40ab-9047-94b2d02a8ac0", "position", out InternalWorldPosition_Translation_value_Binding))
			{
				_transformViaCoherenceSync_5087559671055490318 = (Coherence.Toolkit.CoherenceSync)InternalWorldPosition_Translation_value_Binding.Component.GetComponent<CoherenceSync>();
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).position");
			}

			if (coherenceSync.TryGetBindingByGuid("0d84d40e-a7ab-4496-88e2-8d9b90f6d34c", "rotation", out InternalWorldOrientation_Rotation_value_Binding))
			{
				_transformViaCoherenceSync_5087559671055490318 = (Coherence.Toolkit.CoherenceSync)InternalWorldOrientation_Rotation_value_Binding.Component.GetComponent<CoherenceSync>();
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).rotation");
			}

			if (coherenceSync.TryGetBindingByGuid("12a1df85-ce79-4383-a2ee-acbf14b231a8", "playerName", out InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding))
			{
				_Player_694873017490517114 = (Player)InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding.Component;
			}
			else
			{
				logger.Error("Couldn't find binding (Player).playerName");
			}

			if (coherenceSync.TryGetBindingByGuid("2d004627-0964-48b3-8864-8be5e9bee8c6", "startOnFrame", out InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding))
			{
				_Player_694873017490517114 = (Player)InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding.Component;
			}
			else
			{
				logger.Error("Couldn't find binding (Player).startOnFrame");
			}
			if (coherenceInput.UseFixedSimulationFrames)
			{
				monoBridge.OnLateFixedNetworkUpdate += SendInputState;
			}

			coherenceInput.internalOnInputReceived += OnInput;
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime)
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = Archetypes.IndexForName[coherenceSync.Archetype.ArchetypeName]
					}
				};

				return components;
			}

			return null;
		}

		private void OnDestroy()
		{
			if (monoBridge != null)
			{
				monoBridge.OnLateFixedNetworkUpdate -= SendInputState;
			}
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}

			this.client = client;

			lastSerializedCoherenceUUID = coherenceSync.coherenceUUID;
			sync.Input.internalSetButtonState = SetButtonState;
			sync.Input.internalSetButtonRangeState = SetButtonRangeState;
			sync.Input.internalSetAxisState = SetAxisState;
			sync.Input.internalSetStringState = SetStringState;

			sync.Input.internalGetButtonState = GetButtonState;
			sync.Input.internalGetButtonRangeState = GetButtonRangeState;
			sync.Input.internalGetAxisState = GetAxisState;
			sync.Input.internalGetStringState = GetStringState;

			sync.Input.internalRequestBuffer = () => inputBuffer;
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncPlayerCursor] Unhandled command: {command.GetType()}.");
					break;
			}
		}

		public override void SendUpdates()
		{
			SendComponentUpdates();
			if (!coherenceInput.UseFixedSimulationFrames)
			{
				SendInputState();
			}
		}

		public override (List<ICoherenceComponentData>, List<uint>) GetLatestChanges()
		{
			var updates = new List<ICoherenceComponentData>();
			var masks = new List<uint>();

			if (coherenceSync.HasStateAuthority)
			{

				// Send Translation / WorldPosition
				{
					var update = _transformViaCoherenceSync_5087559671055490318_WorldPosition_lastSentData;
				
					if (coherenceSync.IsReadyToSample(InternalWorldPosition_Translation_value_Binding, coherenceSync.MonoBridge.NetworkTime.TimeAsDouble))
					{
						update.value = (_transformViaCoherenceSync_5087559671055490318.coherencePosition);
					}

					uint mask = performedInitialSync ? _transformViaCoherenceSync_5087559671055490318_WorldPosition_lastSentData.DiffWith(update) : 0b11111111111111111111111111111111;

					update.ResetByteArrays(_transformViaCoherenceSync_5087559671055490318_WorldPosition_lastSentData, mask);

					if(mask != 0)
					{
						updates.Add(update);
						masks.Add(mask);
						_transformViaCoherenceSync_5087559671055490318_WorldPosition_lastSentData = update;
					}
				}

				// Send Rotation / WorldOrientation
				{
					var update = _transformViaCoherenceSync_5087559671055490318_WorldOrientation_lastSentData;
				
					if (coherenceSync.IsReadyToSample(InternalWorldOrientation_Rotation_value_Binding, coherenceSync.MonoBridge.NetworkTime.TimeAsDouble))
					{
						update.value = (_transformViaCoherenceSync_5087559671055490318.coherenceRotation);
					}

					uint mask = performedInitialSync ? _transformViaCoherenceSync_5087559671055490318_WorldOrientation_lastSentData.DiffWith(update) : 0b11111111111111111111111111111111;

					update.ResetByteArrays(_transformViaCoherenceSync_5087559671055490318_WorldOrientation_lastSentData, mask);

					if(mask != 0)
					{
						updates.Add(update);
						masks.Add(mask);
						_transformViaCoherenceSync_5087559671055490318_WorldOrientation_lastSentData = update;
					}
				}

				// Send PlayerCursor_Player_694873017490517114 / PlayerCursor_Player_694873017490517114
				{
					var update = _Player_694873017490517114_PlayerCursor_Player_694873017490517114_lastSentData;
				
					if (coherenceSync.IsReadyToSample(InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding, coherenceSync.MonoBridge.NetworkTime.TimeAsDouble))
					{
						update.playerName = (_Player_694873017490517114.playerName ?? "");
					}
					if (coherenceSync.IsReadyToSample(InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding, coherenceSync.MonoBridge.NetworkTime.TimeAsDouble))
					{
						update.startOnFrame = (_Player_694873017490517114.startOnFrame);
					}

					uint mask = performedInitialSync ? _Player_694873017490517114_PlayerCursor_Player_694873017490517114_lastSentData.DiffWith(update) : 0b11111111111111111111111111111111;

					update.ResetByteArrays(_Player_694873017490517114_PlayerCursor_Player_694873017490517114_lastSentData, mask);

					if(mask != 0)
					{
						updates.Add(update);
						masks.Add(mask);
						_Player_694873017490517114_PlayerCursor_Player_694873017490517114_lastSentData = update;
					}
				}

				if (coherenceSync.coherenceUUID != lastSerializedCoherenceUUID)
				{
					var update = Impl.GetRootDefinition().GenerateCoherenceUUIDData(coherenceSync.coherenceUUID);
					var mask = 0b11111111111111111111111111111111;

					updates.Add(update);
					masks.Add(mask);

					lastSerializedCoherenceUUID = coherenceSync.coherenceUUID;
				}
				performedInitialSync = true;
			}

			return (updates, masks);
		}

		public override void PerformInterpolation()
		{
			if (InternalWorldPosition_Translation_value_Binding.ShouldApplyNetworkData())
			{
				_transformViaCoherenceSync_5087559671055490318.coherencePosition = (UnityEngine.Vector3)InternalWorldPosition_Translation_value_Binding.InterpolationSettings.PerformInterpolationVector3((Vector3)_transformViaCoherenceSync_5087559671055490318.coherencePosition, monoBridge.NetworkTime.TimeAsDouble) ;
			}
			if (InternalWorldOrientation_Rotation_value_Binding.ShouldApplyNetworkData())
			{
				_transformViaCoherenceSync_5087559671055490318.coherenceRotation = (UnityEngine.Quaternion)InternalWorldOrientation_Rotation_value_Binding.InterpolationSettings.PerformInterpolationQuaternion((Quaternion)_transformViaCoherenceSync_5087559671055490318.coherenceRotation, monoBridge.NetworkTime.TimeAsDouble) ;
			}
			if (InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding.ShouldApplyNetworkData())
			{
				_Player_694873017490517114.playerName = (System.String)InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding.InterpolationSettings.PerformInterpolationString((string)_Player_694873017490517114.playerName, monoBridge.NetworkTime.TimeAsDouble) ;
			}
			if (InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding.ShouldApplyNetworkData())
			{
				_Player_694873017490517114.startOnFrame = (System.Int64)InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding.InterpolationSettings.PerformInterpolationLong((long)_Player_694873017490517114.startOnFrame, monoBridge.NetworkTime.TimeAsDouble) ;
			}
		}

		public override void ResetInterpolation(bool setToLastSamples)
		{
			if (setToLastSamples && InternalWorldPosition_Translation_value_Binding.InterpolationSettings.GetSampleType() != null)
			{
				var sample = InternalWorldPosition_Translation_value_Binding.InterpolationSettings.GetLastSample<Vector3>();
				if (sample != null) 
				{
					Vector3 lastSample = sample.Value;
					_transformViaCoherenceSync_5087559671055490318.coherencePosition = (UnityEngine.Vector3)lastSample;
				}
			}
			InternalWorldPosition_Translation_value_Binding.InterpolationSettings.Reset();
			if (setToLastSamples && InternalWorldOrientation_Rotation_value_Binding.InterpolationSettings.GetSampleType() != null)
			{
				var sample = InternalWorldOrientation_Rotation_value_Binding.InterpolationSettings.GetLastSample<Quaternion>();
				if (sample != null) 
				{
					Quaternion lastSample = sample.Value;
					_transformViaCoherenceSync_5087559671055490318.coherenceRotation = (UnityEngine.Quaternion)lastSample;
				}
			}
			InternalWorldOrientation_Rotation_value_Binding.InterpolationSettings.Reset();
			if (setToLastSamples && InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding.InterpolationSettings.GetSampleType() != null)
			{
				var sample = InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding.InterpolationSettings.GetLastSample<string>();
				if (sample != null) 
				{
					string lastSample = sample.Value;
					_Player_694873017490517114.playerName = (System.String)lastSample;
				}
			}
			InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding.InterpolationSettings.Reset();
			if (setToLastSamples && InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding.InterpolationSettings.GetSampleType() != null)
			{
				var sample = InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding.InterpolationSettings.GetLastSample<long>();
				if (sample != null) 
				{
					long lastSample = sample.Value;
					_Player_694873017490517114.startOnFrame = (System.Int64)lastSample;
				}
			}
			InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding.InterpolationSettings.Reset();
		}		

		public override void ResetLastSentData()
		{
			// Translation / WorldPosition
			{
				_transformViaCoherenceSync_5087559671055490318_WorldPosition_lastSentData.value = (_transformViaCoherenceSync_5087559671055490318.coherencePosition);
			}
			// Rotation / WorldOrientation
			{
				_transformViaCoherenceSync_5087559671055490318_WorldOrientation_lastSentData.value = (_transformViaCoherenceSync_5087559671055490318.coherenceRotation);
			}
			// PlayerCursor_Player_694873017490517114 / PlayerCursor_Player_694873017490517114
			{
				_Player_694873017490517114_PlayerCursor_Player_694873017490517114_lastSentData.playerName = (_Player_694873017490517114.playerName ?? "");
				_Player_694873017490517114_PlayerCursor_Player_694873017490517114_lastSentData.startOnFrame = (_Player_694873017490517114.startOnFrame);
			}
		}

		private void SendComponentUpdates()
		{
			var entity = coherenceSync.EntityID;

			if (coherenceSync.HasStateAuthority)
			{
				var (updates, masks) = GetLatestChanges();

				if (updates.Count > 0)
				{
					client.UpdateComponents(coherenceSync.EntityID, updates.ToArray(), masks.ToArray());
				}
			}
		}

		public override void ApplyComponentUpdates(EntityData entityData)
		{
			// Sort component changes by (order, index) using Linq to ensure consistent replication order, regardless of ordering in packet.
			// Multiplying by a constant value is faster than using Linq .ThenBy extension method.
			updateBuff.Clear();
			updateBuff.AddRange(entityData.Store.Values);
			updateBuff.Sort((a, b) => (a.Data.GetComponentOrder() * 10000 + a.Data.GetComponentType()).CompareTo(
				b.Data.GetComponentOrder() * 10000 + b.Data.GetComponentType()));

			foreach (var change in updateBuff)
			{
				var componentType = change.Data.GetComponentType();

				switch(componentType)
				{

					case 0:
					{
						// Translation
						var data = (WorldPosition)change.Data;
						var mask = change.Mask;
						if((mask & 0b00000000000000000000000000000001) != 0)
						{
							InternalWorldPosition_Translation_value_Binding.ReceiveSampleFromNetwork<Vector3>(data.value, data.GetSimulationFrame().Frame);
						}
						break;
					}

					case 1:
					{
						// Rotation
						var data = (WorldOrientation)change.Data;
						var mask = change.Mask;
						if((mask & 0b00000000000000000000000000000001) != 0)
						{
							InternalWorldOrientation_Rotation_value_Binding.ReceiveSampleFromNetwork<Quaternion>(data.value, data.GetSimulationFrame().Frame);
						}
						break;
					}

					case 91:
					{
						// PlayerCursor_Player_694873017490517114
						var data = (PlayerCursor_Player_694873017490517114)change.Data;
						var mask = change.Mask;
						if((mask & 0b00000000000000000000000000000001) != 0)
						{
							InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_playerName_Binding.ReceiveSampleFromNetwork<string>(data.playerName, data.GetSimulationFrame().Frame);
						}
						if((mask & 0b00000000000000000000000000000010) != 0)
						{
							InternalPlayerCursor_Player_694873017490517114_PlayerCursor_Player_694873017490517114_startOnFrame_Binding.ReceiveSampleFromNetwork<long>(data.startOnFrame, data.GetSimulationFrame().Frame);
						}
						break;
					}

					case Definition.InternalArchetypeComponent:
						// Handled internally by coherence Client Core
						break;
					case Definition.InternalGenericPrefabReference:
						// Handled internally by the coherence Mono Bridge
						break;
					case Definition.InternalUniqueID:
						coherenceSync.coherenceUUID = lastSerializedCoherenceUUID = Impl.GetRootDefinition().ExtractCoherenceUUID(change.Data);
						break;
					case Definition.InternalPersistence:
						break;
					case Definition.InternalConnectedEntity:
						var newConnectedEntity = Impl.GetRootDefinition().ExtractConnectedEntityID(change.Data);
						coherenceSync.ConnectedEntityChanged(newConnectedEntity);
						break;
					case Definition.InternalConnection:
					case Definition.InternalGlobal:
					case Definition.InternalGlobalQuery:
					case Definition.InternalTag:
					case Definition.InternalTagQuery:
					case Definition.InternalWorldPositionQuery:
						break;
					default:
						logger.Warning($"Unhandled component type ID: {componentType}");
						break;
					}
			}
		}

		private void AddDelayedEntityReference(SerializeEntityID id, ComponentChange componentChange)
		{
			if (delayedEntityReferences == null)
			{
				delayedEntityReferences = new Dictionary<SerializeEntityID, EntityData>();
			}

			EntityData entityData;

			if (!delayedEntityReferences.TryGetValue(id, out entityData))
			{
				entityData = EntityData.New();
			}

			entityData.Update(componentChange);
			delayedEntityReferences[id] = entityData;
		}

		private void SetButtonState(string name, bool value)
		{
			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}
		}

		private void SetButtonRangeState(string name, float value)
		{
			switch(name)
			{
			case "key":
				currentInput.key = value;
				break;
			default:
				logger.Error($"No input button range of name: {name}");
				break;
			}
		}

		private void SetAxisState(string name, Vector2 value)
		{
			switch(name)
			{
			case "Mov":
				currentInput.Mov = value;
				break;
			default:
				logger.Error($"No input axis of name: {name}");
				break;
			}
		}

		private void SetStringState(string name, string value)
		{
			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}
		}

		private void SendInputState()
		{
			if (!coherenceInput.IsProducer || !coherenceInput.IsReadyToProcessInputs || !coherenceInput.IsInputOwner)
			{
				return;
			}

			if (lastAddedFrame != currentSimulationFrame)
			{
				inputBuffer.AddInput(currentInput, currentSimulationFrame);
				lastAddedFrame = currentSimulationFrame;
			}

			while (inputBuffer.DequeueForSending(currentSimulationFrame, out long frameToSend, out TestCube input, out bool differs))
			{
				coherenceInput.DebugOnInputSent(frameToSend, input);
				client.SendInput(input, frameToSend, coherenceSync.EntityID);
			}
		}

		private bool ShouldPollCurrentInput(long frame)
		{
			return coherenceInput.IsProducer && coherenceInput.Delay == 0 && frame == currentSimulationFrame;
		}

		private bool GetButtonState(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}

			return false;
		}

		private float GetButtonRangeState(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
			case "key":
				{
					if (ShouldPollCurrentInput(frame))
					{
						return coherenceInput.IsProducer ? currentInput.key : currentInput.key;
					}

					inputBuffer.TryGetInput(frame, out TestCube input);
					return coherenceInput.IsProducer ? input.key : input.key;
				}
			default:
				logger.Error($"No input button range of name: {name}");
				break;
			}

			return 0f;
		}

		private Vector2 GetAxisState(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
			case "Mov":
				{
					if (ShouldPollCurrentInput(frame))
					{
						return coherenceInput.IsProducer ? currentInput.Mov : currentInput.Mov;
					}

					inputBuffer.TryGetInput(frame, out TestCube input);
					return coherenceInput.IsProducer ? input.Mov : input.Mov;
				}
			default:
				logger.Error($"No input axis of name: {name}");
				break;
			}

			return Vector2.zero;
		}

		private string GetStringState(string name, long? simulationFrame)
		{
			long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);

			switch(name)
			{
				default:
					logger.Error($"No input button of name: {name}");
					break;
			}

			return null;
		}

		private void OnInput(IEntityInput entityInput, long frame)
		{
			var input = (TestCube)entityInput;
			coherenceInput.DebugOnInputReceived(frame, entityInput);
			inputBuffer.ReceiveInput(input, frame);
		}

		private T FindCommandTarget<T>() where T : class
		{
			var targets = GetComponentsInChildren<T>();

			if (targets == null || targets.Length == 0)
			{
				logger.Error($"Couldn't find {nameof(T)} component in children.");
				
				return null;
			}

			if (targets.Length > 1)
			{
				logger.Error($"Found more than one {nameof(T)} component in children.");
			}

			return targets[0];
		}
	}
}

// Copyright (c) coherence ApS.
// See the license file in the project root for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using UnityEngine;
	using Unity.Collections;
	using Unity.Mathematics;

	public struct PlayerInput : IEntityInput
	{
		public float key;
		public float2 Mov;

		public float Compressedkey => ValueCompressor.Compressfloat(key, 24, 2400);
		public float2 CompressedMov => ValueCompressor.Compressfloat2(Mov, 24, 2400);

		public uint GetComponentType() => Definition.InternalPlayerInput;

		private readonly bool isRemoteInput;

		public PlayerInput
		(
			float datakey,
			float2 dataMov,
			bool isRemoteInput
		)
		{
			key = datakey;
			Mov = dataMov;
			this.isRemoteInput = isRemoteInput;
		}

		public override string ToString()
		{
			return isRemoteInput
				? $"{nameof(key)}: {key}, {nameof(Mov)}: {Mov}"
				: $"{nameof(key)}:{Compressedkey}, {nameof(Mov)}:{CompressedMov}";
		}

		public static void Serialize(PlayerInput inputData, IOutProtocolBitStream bitStream)
		{
			var converted_key = CoherenceToUnityConverters.FromUnityfloat(inputData.key);
			bitStream.WriteFixedPoint(converted_key, 24, 2400);
			var converted_Mov = CoherenceToUnityConverters.FromUnityfloat2(inputData.Mov);
			bitStream.WriteVector2f(converted_Mov, 24, 2400);
		}

		public static PlayerInput Deserialize(IInProtocolBitStream bitStream)
		{
			var converted_key = bitStream.ReadFixedPoint(24, 2400);
			var datakey = CoherenceToUnityConverters.ToUnityfloat(converted_key);
			var converted_Mov = bitStream.ReadVector2f(24, 2400);
			var dataMov = CoherenceToUnityConverters.ToUnityfloat2(converted_Mov);

			return new PlayerInput
			(
				datakey,
				dataMov,
				true
			);
		}
	}
}
